{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;\f2\fmodern\fcharset0 Courier-Bold;
}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;
\red109\green109\blue109;\red133\green96\blue154;\red86\green132\blue173;\red254\green187\blue91;\red88\green118\blue71;
}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c34510\c46275\c27843;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 Sa se scrie un program Kotlin care va crea echivalentul unei bariere (si apoi o va utiliza intr-un exemplu simplu de genul sume de valori dintr-un hashMap realizate pe mai multe fire Java). Implementarea acestei bariere se va baza pe fire Java (apelate din programul Kotlin) si pe mecanismele wait, notify si notify all\
\
\
\
\
import \cf4 java.util.*\
\cf2 import \cf4 kotlin.concurrent.thread\
\
\cf5 // Barier\uc0\u259  sincronizare cu wait/notifyAll\
\cf2 class \cf4 Barrier(\cf2 private val \cf6 totalThreads\cf4 : Int) \{\
    \cf2 private var \cf6 counter \cf4 = \cf7 0\
    \cf2 private val \cf6 lock \cf4 = Object()\
\
    \cf2 fun \cf8 await\cf4 () \{\
        
\f1\i synchronized
\f0\i0 (\cf6 lock\cf4 ) 
\f2\b \{\
            
\f0\b0 \cf6 counter\cf4 ++\
            \cf2 if \cf4 (\cf6 counter \cf4 == \cf6 totalThreads\cf4 ) \{\
                \cf6 lock\cf4 .notifyAll()  \cf5 // -> FUNC\uc0\u538 IONEAZ\u258  pentru c\u259  e \'een synchronized\
            \cf4 \} \cf2 else \cf4 \{\
                \cf2 while \cf4 (\cf6 counter \cf4 < \cf6 totalThreads\cf4 ) \{\
                    \cf6 lock\cf4 .wait()   \cf5 // -> la fel, valid doar \'een synchronized\
                \cf4 \}\
            \}\
        
\f2\b \}\
    
\f0\b0 \}\
\}\
\
\cf2 fun \cf8 main\cf4 () \{\
    \cf5 // HashMap cu valori de procesat\
    \cf2 val \cf4 sharedMap = 
\f1\i hashMapOf
\f0\i0 (\
        \cf9 "a" 
\f1\i \cf8 to 
\f0\i0 \cf7 10\cf2 ,\
        \cf9 "b" 
\f1\i \cf8 to 
\f0\i0 \cf7 20\cf2 ,\
        \cf9 "c" 
\f1\i \cf8 to 
\f0\i0 \cf7 30\cf2 ,\
        \cf9 "d" 
\f1\i \cf8 to 
\f0\i0 \cf7 40\
    \cf4 )\
\
    \cf2 val \cf4 barrier = Barrier(sharedMap.\cf6 size\cf4 )  \cf5 // bariera pentru 4 fire\
    \cf2 val \cf4 result = Collections.synchronizedMap(
\f1\i mutableMapOf
\f0\i0 <String\cf2 , \cf4 Int>())\
\
    \cf2 val \cf4 threads = 
\f1\i mutableListOf
\f0\i0 <Thread>()\
\
    \cf5 // Lans\uc0\u259 m c\'e2te un thread pentru fiecare intrare\
    \cf2 for \cf4 ((key\cf2 , \cf4 value) \cf2 in \cf4 sharedMap) \{\
        \cf2 val \cf4 t = 
\f1\i thread 
\f2\i0\b \{\
            
\f1\i\b0 println
\f0\i0 (\cf9 "[\cf2 $\cf4 key\cf9 ] Suma = \cf2 $\{\cf4 value * \cf7 2\cf2 \}\cf9 "\cf4 )  \cf5 // exemplu: procesare\
            \cf4 result[key] = value * \cf7 2\
\
            
\f1\i \cf4 println
\f0\i0 (\cf9 "[\cf2 $\cf4 key\cf9 ] A\uc0\u537 teapt\u259  bariera..."\cf4 )\
            barrier.await()  \cf5 // sincronizare\
\
            
\f1\i \cf4 println
\f0\i0 (\cf9 "[\cf2 $\cf4 key\cf9 ] Continu\uc0\u259  dup\u259  barier\u259 "\cf4 )\
        
\f2\b \}\
        
\f0\b0 threads.add(t)\
    \}\
\
    \cf5 // A\uc0\u537 tept\u259 m terminarea firelor\
    \cf4 threads.
\f1\i \cf8 forEach 
\f2\i0\b \cf4 \{ it
\f0\b0 .join() 
\f2\b \}\
\
    
\f1\i\b0 println
\f0\i0 (\cf9 "Toate firele au trecut de barier\uc0\u259 ."\cf4 )\
    
\f1\i println
\f0\i0 (\cf9 "Rezultat final: \cf2 $\cf4 result\cf9 "\cf4 )\
\}\
\
}