{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Oblique;
}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red191\green100\blue38;
\red153\green168\blue186;\red31\green136\blue139;\red254\green187\blue91;\red88\green118\blue71;\red133\green96\blue154;
\red173\green169\blue32;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c74902\c39216\c14902;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c12157\c53333\c54510;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c52157\c37647\c60392;
\csgenericrgb\c67843\c66275\c12549;\csgenericrgb\c33725\c51765\c67843;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Utilizand modelul adaptor sa se creeze un program Kotlin care va primi la intrare diverse tipuri de date simple sau de tip colectie si va realiza afisarea lor ca o singura operatie care primeste doar obiectul. Se vor desena diagrama de clase si de obiecte. Se va explica maniera de aplicare a principiilor SOLID\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs26 \cf2 \cb3 // interfata generica\
\
\cf4 interface \cf5 Printable<\cf6 T\cf5 >\{\
    \cf4 fun \cf7 print\cf5 (value : \cf6 T\cf5 )\
\}\
\
\cf4 class \cf5 IntAdapter : Printable<Int>\{\
    \cf4 override fun \cf7 print\cf5 (value: Int) \{\
        
\f2\i println
\f1\i0 (\cf8 "Valoarea introdusa este de tip int : \cf4 $\cf5 value\cf8 "\cf5 )\
    \}\
\}\
\
\cf4 class \cf5 StringAdapter : Printable<String>\{\
    \cf4 override fun \cf7 print\cf5 (value: String) \{\
        
\f2\i println
\f1\i0 (\cf8 "Valoarea introdusa este de tip string : \cf4 $\cf5 value\cf8 "\cf5 )\
    \}\
\
\}\
\
\cf4 class \cf5 ListAdapter<\cf6 T\cf5 > : Printable<List<\cf6 T\cf5 >>\{\
    \cf4 override fun \cf7 print\cf5 (value: List<\cf6 T\cf5 >) \{\
        
\f2\i println
\f1\i0 (\cf8 "List (\cf4 $\{\cf5 value.\cf9 size\cf4 \}\cf8  elemente): \cf4 $\cf5 value\cf8 "\cf5 )\
    \}\
\
\}\
\
\cf4 class \cf5 SetAdapter<\cf6 T\cf5 > : Printable<Set<\cf6 T\cf5 >> \{\
    \cf4 override fun \cf7 print\cf5 (value: Set<\cf6 T\cf5 >) \{\
        
\f2\i println
\f1\i0 (\cf8 "Set (\cf4 $\{\cf5 value.\cf9 size\cf4 \}\cf8  elemente): \cf4 $\cf5 value\cf8 "\cf5 )\
    \}\
\}\
\
\cf4 class \cf5 MapAdapter<\cf6 K\cf4 , \cf6 V\cf5 > : Printable<Map<\cf6 K\cf4 , \cf6 V\cf5 >> \{\
    \cf4 override fun \cf7 print\cf5 (value: Map<\cf6 K\cf4 , \cf6 V\cf5 >) \{\
        
\f2\i println
\f1\i0 (\cf8 "Map (\cf4 $\{\cf5 value.\cf9 size\cf4 \}\cf8  perechi): \cf4 $\cf5 value\cf8 "\cf5 )\
    \}\
\}\
\
\cf2 // Fabrica de adaptoare\
\cf4 object \cf5 AdapterFactory \{\
    \cf10 @Suppress\cf5 (\cf8 "UNCHECKED_CAST"\cf5 )\
    \cf4 fun \cf5 <\cf6 T\cf5 > \cf7 getAdapter\cf5 (obj: \cf6 T\cf5 ): Printable<\cf6 T\cf5 > = \cf4 when \cf5 (obj) \{\
        \cf4 is \cf5 Int -> IntAdapter() \cf4 as \cf5 Printable<\cf6 T\cf5 >\
        \cf4 is \cf5 String -> StringAdapter() \cf4 as \cf5 Printable<\cf6 T\cf5 >\
        \cf4 is \cf5 List<*> -> ListAdapter<Any?>() \cf4 as \cf5 Printable<\cf6 T\cf5 >\
        \cf4 is \cf5 Set<*> -> SetAdapter<Any?>() \cf4 as \cf5 Printable<\cf6 T\cf5 >\
        \cf4 is \cf5 Map<*\cf4 , \cf5 *> -> MapAdapter<Any?\cf4 , \cf5 Any?>() \cf4 as \cf5 Printable<\cf6 T\cf5 >\
        \cf4 else \cf5 -> \cf4 throw \cf5 IllegalArgumentException(\cf8 "Nu exist\uc0\u259  adaptor pentru tipul \cf4 $\{\cf5 obj!!::\cf4 class\}\cf8 "\cf5 )\
    \}\
\}\
\
\cf2 // Func\uc0\u539 ia unificat\u259 \
\cf4 fun \cf5 <\cf6 T\cf5 > \cf7 afiseaza\cf5 (obj: \cf6 T\cf5 ) \{\
    \cf4 val \cf5 adapter = AdapterFactory.getAdapter(obj)\
    adapter.print(obj)\
\}\
\
\cf4 fun \cf7 main\cf5 () \{\
    \cf4 val \cf5 intVal = \cf11 10\
    \cf4 val \cf5 strVal = \cf8 "Salut lume"\
    \cf4 val \cf5 lista = 
\f2\i listOf
\f1\i0 (\cf11 1\cf4 , \cf11 2\cf4 , \cf11 3\cf4 , \cf11 4\cf5 )\
    \cf4 val \cf5 multime = 
\f2\i setOf
\f1\i0 (\cf8 "a"\cf4 , \cf8 "b"\cf4 , \cf8 "c"\cf5 )\
    \cf4 val \cf5 dictionar = 
\f2\i mapOf
\f1\i0 (\cf8 "key1" 
\f2\i \cf7 to 
\f1\i0 \cf11 100\cf4 , \cf8 "key2" 
\f2\i \cf7 to 
\f1\i0 \cf11 200\cf5 )\
\
    
\f2\i afiseaza
\f1\i0 (intVal)\
    
\f2\i afiseaza
\f1\i0 (strVal)\
    
\f2\i afiseaza
\f1\i0 (lista)\
    
\f2\i afiseaza
\f1\i0 (multime)\
    
\f2\i afiseaza
\f1\i0 (dictionar)\
\}\
}