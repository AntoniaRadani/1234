{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Oblique;
\f3\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;
\red31\green136\blue139;\red133\green96\blue154;\red109\green109\blue109;\red254\green187\blue91;\red88\green118\blue71;
\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c12157\c53333\c54510;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c34510\c46275\c27843;
\csgenericrgb\c33725\c51765\c67843;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Utilizand Kotlin sa se aplice un functor peste elementele unui hashMap care va realiza urmatoarele procesari va aplica f(x) = 3 * x - 1 ca lambda le va transforma in string si va afisa rezultatul \
\
\
** cred ca se poate si mai simplu la asta \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs26 \cf2 \cb3 class \cf4 FunctorHashMap<\cf5 K\cf4 >(\cf2 private val \cf6 map\cf4 : HashMap<\cf5 K\cf2 , \cf4 Int>) \{\
\
    \cf7 // map aplic\uc0\u259  o func\u539 ie (Int) -> R pe valorile HashMap-ului \u537 i returneaz\u259  un FunctorHashMap<K> cu valorile transformate\
    \cf2 fun \cf4 <\cf5 R\cf4 > \cf8 map\cf4 (function: (Int) -> \cf5 R\cf4 ): FunctorHashMapGeneric<\cf5 K\cf2 , \cf5 R\cf4 > \{\
        \cf2 val \cf4 newMap = HashMap<\cf5 K\cf2 , \cf5 R\cf4 >()\
        \cf2 for \cf4 ((key\cf2 , \cf4 value) \cf2 in \cf6 map\cf4 ) \{\
            newMap[key] = function(value)\
        \}\
        \cf7 // Nu putem returna FunctorHashMap<K> cu R, deoarece clasa e fixat\uc0\u259  pe Int\
        // Solu\uc0\u539 ia: schimb\u259 m tipul clasei s\u259  fie generic pe valoare:\
        // Sau pentru simplificare, facem alt\uc0\u259  clas\u259 \
        \cf2 return \cf4 FunctorHashMapGeneric(newMap)\
    \}\
\
    \cf2 fun \cf8 print\cf4 () \{\
        \cf2 for \cf4 ((key\cf2 , \cf4 value) \cf2 in \cf6 map\cf4 ) \{\
            
\f2\i println
\f1\i0 (\cf9 "\cf2 $\cf4 key\cf9  -> \cf2 $\cf4 value\cf9 "\cf4 )\
        \}\
    \}\
\}\
\
\cf7 // Variante generic\uc0\u259  a functorului (pentru orice tip valoare)\
\cf2 class \cf4 FunctorHashMapGeneric<\cf5 K\cf2 , \cf5 V\cf4 >(\cf2 private val \cf6 map\cf4 : HashMap<\cf5 K\cf2 , \cf5 V\cf4 >) \{\
\
    \cf2 fun \cf4 <\cf5 R\cf4 > \cf8 map\cf4 (function: (\cf5 V\cf4 ) -> \cf5 R\cf4 ): FunctorHashMapGeneric<\cf5 K\cf2 , \cf5 R\cf4 > \{\
        \cf2 val \cf4 newMap = HashMap<\cf5 K\cf2 , \cf5 R\cf4 >()\
        \cf2 for \cf4 ((key\cf2 , \cf4 value) \cf2 in \cf6 map\cf4 ) \{\
            newMap[key] = function(value)\
        \}\
        \cf2 return \cf4 FunctorHashMapGeneric(newMap)\
    \}\
\
    \cf2 fun \cf8 print\cf4 () \{\
        \cf2 for \cf4 ((key\cf2 , \cf4 value) \cf2 in \cf6 map\cf4 ) \{\
            
\f2\i println
\f1\i0 (\cf9 "\cf2 $\cf4 key\cf9  -> \cf2 $\cf4 value\cf9 "\cf4 )\
        \}\
    \}\
\}\
\
\cf2 fun \cf8 main\cf4 () \{\
    \cf2 val \cf4 originalMap = 
\f2\i hashMapOf
\f1\i0 (\
        \cf9 "a" 
\f2\i \cf8 to 
\f1\i0 \cf10 2\cf2 ,\
        \cf9 "b" 
\f2\i \cf8 to 
\f1\i0 \cf10 5\cf2 ,\
        \cf9 "c" 
\f2\i \cf8 to 
\f1\i0 \cf10 10\
    \cf4 )\
\
    \cf2 val \cf4 functor = FunctorHashMap(originalMap)\
    \cf2 val \cf4 functorStr = functor.map 
\f3\b \{ 
\f1\b0 x 
\f3\b -> 
\f1\b0 \cf10 3 \cf4 * x - \cf10 1 
\f3\b \cf4 \}  
\f1\b0 \cf7 // aplic\uc0\u259 m f(x)\
        \cf4 .map 
\f3\b \{ it
\f1\b0 .toString() 
\f3\b \}       
\f1\b0 \cf7 // transform\uc0\u259 m \'een string\
\
    \cf4 functorStr.print()\
\}\
\
}