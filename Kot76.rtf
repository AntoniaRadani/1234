{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;\f2\fmodern\fcharset0 Courier-Bold;
}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;
\red109\green109\blue109;\red254\green187\blue91;\red133\green96\blue154;\red86\green132\blue173;\red88\green118\blue71;
\red26\green47\blue26;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c34510\c46275\c27843;
\csgenericrgb\c10196\c18431\c10196;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 Utilizand modelul observator sa se creeze in Kotlin pentru un obiect de tip recalculare a pretului, in functie de niste rade de reducere introduce extern de la tastatura (prin intermediul unui model proxy cu validare pe user, parola), un logger (scriere automata in jurnal a operatiilor) care va scrie intr-un fisier separat user si data in care a fost efectuata modificarea de pret si ce modificare a fost realizata). se vor desena diagrama de clase si de obiecte. Se va explica maniera de aplicare a principiilor SOLID\
\
\
\
\
import \cf4 java.io.File\
\cf2 import \cf4 java.time.LocalDateTime\
\cf2 import \cf4 java.time.format.DateTimeFormatter\
\
\cf5 // avem un obiect de tip RecalcularePret => o clasa recalcularePret\
// recalcularea se face in functie de niste rate de reducere introduse de la tastatura\
// pentru acele rate avem nevoie de un proxy cu user si parola\
// pentru obiect recalcularePret vom face un logger => scrie user + data la care a fost modificat pretul intr-un txt\
\
\
// INTERFATA OBSERVER -> pentru a fi notificati de fiecare data cand se intampla o schimbare a pretului\
\cf2 interface \cf4 Observer\{\
    \cf2 fun \cf6 update\cf4 (nouPret : Double\cf2 , \cf4 user : String\cf2 , \cf4 data : LocalDateTime\cf2 , \cf4 modificare : String)\
\}\
\
\cf5 // SUBIECTUL PRINCIPAL\
\cf2 class \cf4 RecalcularePret \{\
\
    \cf2 private val \cf7 observers \cf4 = 
\f1\i mutableListOf
\f0\i0 <Observer>()\
    \cf2 private var \cf7 pret \cf4 : Double = \cf8 100.00\
\
    \cf2 fun \cf6 addObserver\cf4 (observer : Observer) = \cf7 observers\cf4 .add(observer)\
    \cf2 fun \cf6 removeObserver\cf4 (observer : Observer) = \cf7 observers\cf4 .remove(observer)\
\
    \cf2 fun \cf6 modificaPret\cf4 (rataReducere : Double\cf2 , \cf4 user : String)\{\
        \cf2 val \cf4 pretVechi = \cf7 pret\
        pret \cf4 *= (\cf8 1 \cf4 - rataReducere)\
        \cf2 val \cf4 modificare = \cf9 "Reducere aplicat\uc0\u259 : \cf2 $\{\cf4 rataReducere * \cf8 100\cf2 \}\cf9 % - pret vechi: \cf2 $\cf4 pretVechi\cf9 , pret nou: \cf2 $\cf7 pret\cf9 "\
        \cf4 notifyObservers(user\cf2 , \cf4 modificare)\
    \}\
\
    \cf2 private fun \cf6 notifyObservers\cf4 (user: String\cf2 , \cf4 modificare: String) \{\
        \cf2 val \cf4 data = LocalDateTime.now()\
        \cf7 observers\cf4 .
\f1\i \cf6 forEach
\f2\i0\b \cf4 \{ it
\f0\b0 .update(\cf7 pret\cf2 , \cf4 user\cf2 , \cf4 data\cf2 , \cf4 modificare) 
\f2\b \}\
    
\f0\b0 \}\
\
\}\
\
\cf5 // LOGGER OBSERVER <- un observer care vede cine s-a logat\
\cf2 class \cf4 Logger(\cf2 private val \cf7 fisier \cf4 : File) : Observer\{\
    \cf2 override fun \cf6 update\cf4 (nouPret: Double\cf2 , \cf4 user: String\cf2 , \cf4 data: LocalDateTime\cf2 , \cf4 modificare: String) \{\
        \cf2 val \cf4 formatter = DateTimeFormatter.ofPattern(\cf9 "yyyy-MM-dd HH:mm:ss"\cf4 )\
        \cf2 val \cf4 linie = \cf9 "\cf2 $\{\cf4 data.format(formatter)\cf2 \}\cf9  | User: \cf2 $\cf4 user\cf9  | \cf2 $\cf4 modificare\cf2 \\n\cf9 "\
        \cf7 fisier\cf4 .
\f1\i \cf6 appendText
\f0\i0 \cf4 (linie)\
    \}\
\
\}\
\
\cf5 // interfata pentru serviciul de pret\
\cf2 interface \cf4 PretService\{\
    \cf2 fun \cf6 modificaPret\cf4 (rataReducere : Double\cf2 , \cf4 user : String\cf2 , \cf4 parola : String)\
\}\
\
\cf5 // un validator\
\cf2 class \cf4 UserValidator\{\
    \cf2 private val \cf7 userPass \cf4 = 
\f1\i mapOf
\f0\i0 (\cf9 "user1" 
\f1\i \cf6 to 
\f0\i0 \cf9 "pass1"\cf2 , \cf9 "admin" 
\f1\i \cf6 to 
\f0\i0 \cf9 "admin123"\cf4 )\
\
    \cf2 fun \cf6 valideaza\cf4 (user : String\cf2 , \cf4 parola : String) : Boolean \{\
        \cf2 return \cf7 userPass\cf4 [user] == parola\
    \}\
\}\
\
\cf5 // PROXY PENTRU RECALCULARE PRET\
\cf2 class \cf4 ProxyRecalcularePret( \cf2 private val \cf7 realService \cf4 : RecalcularePret\cf2 ,\
                            private val \cf7 validator \cf4 : UserValidator) : PretService\{\
    \cf2 override fun \cf6 modificaPret\cf4 (rataReducere: Double\cf2 , \cf4 user: String\cf2 , \cf4 parola: String) \{\
        \cf2 if\cf4 (!\cf7 validator\cf4 .valideaza(user\cf2 , \cf4 parola))\{\
            
\f1\i println
\f0\i0 (\cf9 "Autentificare esuata pentru \cf2 $\cf4 user\cf9 !"\cf4 )\
            \cf2 return\
        \cf4 \}\
        \cf2 else\cf4 \{\
            \cf7 realService\cf4 .modificaPret(rataReducere\cf2 , \cf4 user)\
        \}\
    \}\
\}\
\
\cf2 fun \cf6 main\cf4 ()\{\
    \cf2 val \cf4 recalcularePret = RecalcularePret()\
    \cf2 val \cf4 logger = Logger(File(\cf9 "jurnal_log.txt"\cf4 ))\
    recalcularePret.addObserver(logger)\
\
    \cf2 val \cf4 validator = UserValidator()\
    \cf2 val \cf4 proxy = ProxyRecalcularePret(recalcularePret\cf2 , \cf4 validator)\
\
    \cf2 while \cf4 (\cf2 true\cf4 ) \{\
        
\f1\i println
\f0\i0 (\cf9 "Introdu user:"\cf4 )\
        \cf2 val \cf4 user = 
\f1\i readLine
\f0\i0 () ?: \cf2 break\
        
\f1\i \cf4 println
\f0\i0 (\cf9 "Introdu parola:"\cf4 )\
        \cf2 val \cf4 parola = 
\f1\i readLine
\f0\i0 () ?: \cf2 break\
        
\f1\i \cf4 println
\f0\i0 (\cf9 "Introdu rata reducere (ex: 0.1 pentru 10%):"\cf4 )\
        \cf2 val \cf4 rataStr = 
\f1\i readLine
\f0\i0 () ?: \cf2 break\
\
        val \cf4 rata = rataStr.
\f1\i \cf6 toDoubleOrNull
\f0\i0 \cf4 ()\
        \cf2 if \cf4 (rata == \cf2 null \cf4 || \cb10 rata\cb3  < \cf8 0 \cf4 || \cb10 rata\cb3  > \cf8 1\cf4 ) \{\
            
\f1\i println
\f0\i0 (\cf9 "Rat\uc0\u259  invalid\u259 !"\cf4 )\
            \cf2 continue\
        \cf4 \}\
\
        proxy.modificaPret(\cb10 rata\cf2 \cb3 , \cf4 user\cf2 , \cf4 parola)\
        
\f1\i println
\f0\i0 (\cf9 "Modificare efectuat\uc0\u259  dac\u259  autentificarea a fost corect\u259 .\cf2 \\n\cf9 "\cf4 )\
    \}\
\}\
\
}